---
title: "Alannah's R Project Part 1"
output: html_notebook
---

# Part A: Univariate statistics with R

# Normality check & data transformation

```{r}
bd = read.table("RTestData-1.txt", header=TRUE)
bd
```

```{r} 
# (1) INITIAL PLOTS
# strep
hist(bd$strep)
qqnorm(bd$strep)
qqline(bd$strep)

# prev
hist(bd$prev)
qqnorm(bd$prev)
qqline(bd$prev)

# lepto
hist(bd$lepto)
qqnorm(bd$lepto)
qqline(bd$lepto)

# fuso
hist(bd$fuso)
qqnorm(bd$fuso)
qqline(bd$fuso)

# veil
hist(bd$veil)
qqnorm(bd$veil)
qqline(bd$veil)

# deepest
hist(bd$deepest)
qqnorm(bd$deepest)
qqline(bd$deepest)

# (2) TRANSFORMATIONS AND PLOT REPEATS
# transformation of strep
strep = log(bd$strep)
hist(strep)
qqnorm(strep)
qqline(strep)

# transformation of prev
prev = sqrt(bd$prev)
prev
hist(prev)
qqnorm(prev)
qqline(prev)

# transformation of lepto
lepto = sqrt(bd$lepto)
hist(lepto)
qqnorm(lepto)
qqline(lepto)

# transformation of fuso
fuso = sqrt(bd$fuso)
hist(fuso)
qqnorm(fuso)
qqline(fuso)

# transformation of veil
veil = sqrt(bd$veil)
hist(veil)
qqnorm(veil)
qqline(veil)

```

# One-way ANOVA and summmary and boxplots

```{r}
# (1) lepto by time
oneway.test( lepto ~ bd$time)
boxplot(lepto ~ bd$time)

# (2) strep by time
oneway.test(strep ~ bd$time)
boxplot(strep ~ bd$time)
```

# Correlation analysis 

```{r}
# (1) strep vs. prev
cor.test(strep, prev)

# (2) strep vs. fuso
cor.test(strep, fuso)

# (3) fuso vs. lepto
cor.test(fuso, lepto)
```

# Linear regressions

```{r}
# (1) strep vs. deepest
strep_vs_deepest <- lm(strep ~ bd$deepest)
plot(strep ~ bd$deepest)
abline(strep_vs_deepest)


# (2) fuso vs. deepest
fuso_vs_deepest <- lm(fuso ~ bd$deepest)
plot(fuso ~ bd$deepest)
abline(fuso_vs_deepest)

```

# Part B: Use ggplot2 to make pretty graphs

```{r}
# (1) ggplot histogram of prev variable
# install.packages("ggplot2")
library(ggplot2)
ggplot(bd, aes(x = prev)) + geom_histogram()

# (2) ggplot scatterplot of strep by deepest, *colored by time*
ggplot(bd, aes(x=strep, y=deepest, color = time)) + geom_point()

# (3) ggplot scatterplot of fuso by deepest
ggplot(bd, aes(x=fuso, y=deepest)) + geom_point()

# (4) same as (3), but using smoothing algorithm
ggplot(bd, aes(x=fuso, y=deepest)) + geom_point() + geom_smooth()
```

# Part C: Vegan analysis

```{r}
# install.packages("vegan")
library(vegan)

# creating new data frame
bd2=bd[2:6]
bd2

# (1) calculating alpha diversity of the new dataset
bd2_shannon_diversity <- diversity(bd2)
bd2_shannon_diversity

# (2) using rarefy and rarecurve
species_abundance = rowSums(bd2)
rare_minimum = min(rowSums(bd2))
rare_minimum
bd2
bd2 = round(bd2) # rounding the data because rarefy is not working with the decimal numbers,giving error if not whole integers. this makes     # sense if it is asking for species number.
rare_species = rarefy(bd2, rare_minimum)
rarecurve(bd2, col = "purple")

# (3) bray-curtis dissimilarity matrix and histogram
bray_bd2 = vegdist(bd2, "bray")
bray_bd2
hist(bray_bd2, xlim = range(0.0,1.0))
```

```{r}
# (1) multidimensional scaling with bray-curtis matrix
bd2.mds <- metaMDS(comm = bd2, distance = "bray", trace = FALSE, autotransform = FALSE)
bd2.mds
bd
# (2) plot colored by (a) status, then (b) time
plot(bd2.mds$points)
MDS_xy <-data.frame(bd2.mds$points)
MDS_xy$status <- bd$status
MDS_xy$time <- bd$time
# (a) by status!
library(ggplot2)
ggplot(MDS_xy, aes(x = MDS1, y = MDS2, color = status)) + geom_point() + theme_light()
# (b) by time! 
ggplot(MDS_xy, aes(x = MDS1, y = MDS2, color = time)) + geom_point() + theme_classic()

```


